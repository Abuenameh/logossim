{"version":3,"sources":["../webpack/bootstrap","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../core/Simulation/mesh.js","../../core/Simulation/utils.js","../../core/Simulation/deserialize.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../core/common/prototype.js","../../core/Simulation/simulation.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperty","obj","configurable","writable","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","minLen","toString","slice","constructor","from","test","_toConsumableArray","isArray","iter","iterator","TypeError","_slicedToArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","_defineProperties","props","descriptor","findMeshes","allLinks","findLinkById","id","find","findInputs","meshLinks","map","link","port","input","findOutputs","meshes","isBifurcation","mainLink","mesh","addRecursively","bifurcation","bifurcations","bits","links","inputs","outputs","adjustValueToBits","dataBits","allBitsSet","mask","isValueValid","every","v","isInputError","some","item","isValueFloating","getComponent","self","circuit","components","component","appendComponentDiff","output","diff","properties","getProperties","GenericComponent","methods","instance","Constructor","entries","method","this","initialize","configurations","protoProps","staticProps","ports","values","type","previous","current","errorOrFloating","asArray","fill","bit","defaultFloatingValue","defaultErrorValue","risingEdge","fallingEdge","meta","setValues","linkValue","portName","value1","value2","v1","index","Boolean","customPropertyNames","includes","JSON","parse","stringify","reduce","event","MessageEvent","data","command","emitted","dispatchEvent","frequency","waveform","audioCount","AUDIO_ID","postMessage","payload","toLowerCase","play","pause","setFrequency","freq","setWaveform","wf","deserializeMethod","model","fromEntries","stringFn","Function","deserializePort","getValue","getWireValue","deserialize","serialized","models","deserializeModels","asNumber","Error","reverse","acc","curr","transpose","x1","x2","Number","result","concat","String","padStart","char","parseBinary","arrayLength","fillWith","sanitize","chunk","RegExp","content","replace","match","parseInt","original","emitQueue","stepQueue","workInterval","addEventListener","diagram","setInputValues","setOutputValues","diffLinks","flat","diffComponents","onSimulationStart","executeNextEmitted","setInterval","onSimulationPause","clearInterval","onSimulationStop","setTimeout","firstOfCycle","firstOfSimulation","shift","emitter","portValue","getOutputPort","propagate","executeNextStep","isInputValid","step","stepError","isInputFloating","stepFloating","hasOutputChanged","meshInput","componentId","getAffectedMeshes","meshValue","allInputValues","portInfo","firstDefinedValue","Set","meshOutput","portsWithNewValue","setWireValues"],"mappings":"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","file":"SimulationWorker.8dc31bd963cb3fcf908e.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","/**\r\n * A \"mesh\" is a set of links that are connected to each other.\r\n *\r\n * (if there's a better technical name for this please let me know :P)\r\n *\r\n * This function receives all links and returns every mesh found,\r\n * containing the id of each link that makes part of it, as well as\r\n * a list of all input and output ports that those links connects to.\r\n *\r\n * The implementation is basically a DFS (depth first search) executed\r\n * on every link on the circuit that is not a bifurcation.\r\n */\r\nconst findMeshes = allLinks => {\r\n  // Auxiliary functions\r\n  const findLinkById = id => allLinks.find(l => id === l.id);\r\n\r\n  const addRecursively = (link, mesh) => {\r\n    if (!link || link.id in mesh) return;\r\n\r\n    // eslint-disable-next-line no-param-reassign\r\n    mesh[link.id] = true;\r\n\r\n    addRecursively(findLinkById(link.bifurcation.source), mesh);\r\n    addRecursively(findLinkById(link.bifurcation.target), mesh);\r\n    link.bifurcations.forEach(bifurcation =>\r\n      addRecursively(findLinkById(bifurcation), mesh),\r\n    );\r\n  };\r\n\r\n  // Output ports are inputs in the mesh's perspective\r\n  const findInputs = meshLinks =>\r\n    [\r\n      ...meshLinks.map(link => findLinkById(link).source),\r\n      ...meshLinks.map(link => findLinkById(link).target),\r\n    ].filter(port => port && !port.input);\r\n\r\n  // Input ports are outputs in the mesh's perspective\r\n  const findOutputs = meshLinks =>\r\n    [\r\n      ...meshLinks.map(link => findLinkById(link).source),\r\n      ...meshLinks.map(link => findLinkById(link).target),\r\n    ].filter(port => port && port.input);\r\n\r\n  // Start with no meshes\r\n  const meshes = [];\r\n\r\n  // For each link that is not a bifurcation\r\n  allLinks\r\n    .filter(link => !link.isBifurcation)\r\n    .forEach(mainLink => {\r\n      // If this link is already on a mesh, there's nothing to do\r\n      if (meshes.find(mesh => mainLink.id in mesh)) return;\r\n\r\n      // Otherwise, create a new mesh and recursively explore it\r\n      const mesh = {};\r\n      addRecursively(mainLink, mesh, allLinks);\r\n      meshes.push(mesh);\r\n    });\r\n\r\n  return meshes\r\n    .map(mesh => Object.keys(mesh))\r\n    .map(meshLinks => ({\r\n      bits: findLinkById(meshLinks[0]).bits,\r\n      links: meshLinks,\r\n      inputs: findInputs(meshLinks),\r\n      outputs: findOutputs(meshLinks),\r\n    }));\r\n};\r\n\r\nexport default findMeshes;\r\n","/* eslint-disable no-restricted-globals */\r\nexport const MIN_VALUE = 0;\r\nexport const MAX_VALUE = {\r\n  1: 0b1,\r\n  2: 0b11,\r\n  4: 0b1111,\r\n  8: 0b1111_1111,\r\n  16: 0b1111_1111_1111_1111,\r\n};\r\n\r\nexport const adjustValueToBits = (value, dataBits = 1) => {\r\n  if (typeof value !== 'number') return value;\r\n\r\n  const allBitsSet = 0b1111_1111_1111_1111_1111_1111_1111_1111;\r\n  const mask = allBitsSet >>> (32 - dataBits);\r\n\r\n  return value & mask;\r\n};\r\n\r\nexport const isValueEqual = (value1, value2) => {\r\n  return value1\r\n    .map((v1, index) => v1 === value2[index])\r\n    .every(Boolean);\r\n};\r\n\r\nexport const isValueValid = value =>\r\n  value === null ||\r\n  (Array.isArray(value) && value.every(v => typeof v === 'number'));\r\n\r\nexport const isInputValid = input =>\r\n  input.every(item => isValueValid(item.value, item.bits));\r\n\r\nexport const isValueError = value =>\r\n  value === 'e' ||\r\n  (Array.isArray(value) && value.some(v => v === 'e'));\r\n\r\nexport const isInputError = input =>\r\n  input.some(item => isValueError(item.value));\r\n\r\nexport const isValueFloating = value =>\r\n  value === 'x' ||\r\n  (Array.isArray(value) && value.some(v => v === 'x'));\r\n\r\nexport const isInputFloating = input =>\r\n  input.some(item => isValueFloating(item.value));\r\n\r\nexport const getCleanDiff = () => ({\r\n  components: {},\r\n  links: {},\r\n});\r\n\r\nexport const getComponent = id => {\r\n  if (!self.circuit) return null;\r\n\r\n  return (\r\n    self.circuit.components.find(component => component.id === id) ||\r\n    null\r\n  );\r\n};\r\n\r\n/**\r\n * Find all meshes that are affected by an emitted change.\r\n */\r\nexport const getAffectedMeshes = emitted =>\r\n  self.circuit.meshes.filter(mesh =>\r\n    mesh.inputs.some(\r\n      meshInput =>\r\n        emitted.from.id === meshInput.componentId &&\r\n        Object.keys(emitted.value).includes(meshInput.name),\r\n    ),\r\n  );\r\n\r\n/**\r\n * Finds all components that are connected on a given mesh's Input.\r\n */\r\nexport const getMeshInputComponents = mesh =>\r\n  [\r\n    ...new Set(mesh.inputs.map(meshInput => meshInput.componentId)),\r\n  ].map(componentId => getComponent(componentId));\r\n\r\n/**\r\n * Finds all components that are connected on a given mesh's output.\r\n */\r\nexport const getMeshOutputComponents = mesh =>\r\n  [\r\n    ...new Set(\r\n      mesh.outputs.map(meshOutput => meshOutput.componentId),\r\n    ),\r\n  ].map(componentId => getComponent(componentId));\r\n\r\n/**\r\n * Determines the mesh input value.\r\n */\r\nexport const getMeshInputValue = mesh => {\r\n  const allInputValues = mesh.inputs\r\n    .map(portInfo => {\r\n      const component = getComponent(portInfo.componentId);\r\n\r\n      /**\r\n       * From the mesh's perspective, a component's output port is an\r\n       * input.\r\n       */\r\n      const port = component.getOutputPort(portInfo.name);\r\n\r\n      return port ? port.value : null;\r\n    })\r\n    .filter(value => value !== null);\r\n\r\n  return [...Array(allInputValues[0].length).keys()]\r\n    .map(index => allInputValues.map(v => v[index]))\r\n    .map(arr => {\r\n      const firstDefinedValue = arr.find(\r\n        value => typeof value === 'number',\r\n      );\r\n\r\n      const areBitsCompatible = arr.every(\r\n        item => item === firstDefinedValue || item === 'x',\r\n      );\r\n\r\n      if (!areBitsCompatible) return 'e';\r\n      if (typeof firstDefinedValue === 'number')\r\n        return firstDefinedValue;\r\n      return 'x';\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize all links and ports with the floating value.\r\n */\r\nexport const initializeDiffAndValues = () => {\r\n  self.circuit.components.forEach(component => {\r\n    component.setInputValues(\r\n      Object.fromEntries(\r\n        component.ports.input.map(port => [\r\n          port.id,\r\n          new Array(port.bits || 1).fill('x'),\r\n        ]),\r\n      ),\r\n    );\r\n    component.setOutputValues(\r\n      Object.fromEntries(\r\n        component.ports.output.map(port => [\r\n          port.id,\r\n          new Array(port.bits || 1).fill('x'),\r\n        ]),\r\n      ),\r\n    );\r\n  });\r\n\r\n  const diffLinks = self.circuit.meshes\r\n    .map(mesh => mesh.links)\r\n    .flat()\r\n    .reduce((obj, link) => {\r\n      const { bits } = self.circuit.meshes.find(mesh =>\r\n        mesh.links.includes(link),\r\n      );\r\n\r\n      return { ...obj, [link]: Array(bits).fill('x') };\r\n    }, {});\r\n\r\n  const diffComponents = Object.fromEntries(\r\n    self.circuit.components.map(component => [\r\n      component.id,\r\n      {\r\n        output: Object.fromEntries(\r\n          [\r\n            ...component.ports.input,\r\n            ...component.ports.output,\r\n          ].map(port => [\r\n            port.name,\r\n            new Array(port.bits || 1).fill('x'),\r\n          ]),\r\n        ),\r\n        properties: component.getProperties(),\r\n      },\r\n    ]),\r\n  );\r\n\r\n  postMessage({\r\n    type: 'diff',\r\n    payload: { links: diffLinks, components: diffComponents },\r\n  });\r\n};\r\n\r\nexport const appendComponentDiff = (component, output) => {\r\n  if (!self.diff.components[component.id]) {\r\n    self.diff.components[component.id] = {\r\n      output: {},\r\n      properties: {},\r\n    };\r\n  }\r\n  self.diff.components[component.id] = {\r\n    ...self.diff.components[component.id],\r\n    output: self.diff.components[component.id].output\r\n      ? {\r\n          ...self.diff.components[component.id].output,\r\n          ...(output || {}),\r\n        }\r\n      : output || {},\r\n    properties: component.getProperties(),\r\n  };\r\n};\r\n","/**\r\n * SimulationWorker receives all components properties and methods\r\n * serialized. For that reason, we need to deserialize them before\r\n * executing the simulation thread.\r\n */\r\n\r\n/* ---------------------------------------------------------------- */\r\nimport findMeshes from './mesh';\r\nimport { isValueEqual } from './utils';\r\n\r\n/**\r\n * This class represents a generic component. It receives deserialized\r\n * properties and methods in its constructor and it's used to handle\r\n * simulation logic.\r\n */\r\nexport class GenericComponent {\r\n  constructor(properties, methods) {\r\n    Object.entries(properties).forEach(([key, value]) => {\r\n      this[key] = value;\r\n    });\r\n\r\n    Object.entries(methods).forEach(([name, method]) => {\r\n      this[name] = method.bind(this);\r\n    });\r\n\r\n    this.initialize(properties.configurations);\r\n  }\r\n\r\n  getPort(name) {\r\n    return [...this.ports.input, ...this.ports.output].find(\r\n      port => port.name === name,\r\n    );\r\n  }\r\n\r\n  getInputPort(name) {\r\n    return this.ports.input.find(port => port.name === name);\r\n  }\r\n\r\n  getOutputPort(name) {\r\n    return this.ports.output.find(port => port.name === name);\r\n  }\r\n\r\n  setValues(values, type) {\r\n    this.ports[type] = this.ports[type].map(port => {\r\n      const previous = port.value;\r\n\r\n      let current = previous;\r\n      let errorOrFloating = false;\r\n\r\n      if (values[port.name] !== undefined) {\r\n        current = values[port.name];\r\n        if (typeof current === 'number') {\r\n          current = values[port.name].asArray(port.bits);\r\n        } else if (current === 'x' || current === 'e') {\r\n          current = Array(port.bits).fill(current);\r\n          errorOrFloating = true;\r\n        } else if (!Array.isArray(current)) {\r\n          errorOrFloating = true;\r\n        }\r\n      }\r\n\r\n      current = current.map(bit => {\r\n        if (bit === 'x') return port.defaultFloatingValue ?? 'x';\r\n        if (bit === 'e') return port.defaultErrorValue ?? 'e';\r\n        return bit;\r\n      });\r\n\r\n      if (previous.some(bit => bit === 'x' || bit === 'e')) {\r\n        errorOrFloating = true;\r\n      }\r\n\r\n      const risingEdge = !errorOrFloating && previous < current;\r\n      const fallingEdge = !errorOrFloating && previous > current;\r\n\r\n      return {\r\n        ...port,\r\n        value: current,\r\n        meta: {\r\n          previous,\r\n          risingEdge,\r\n          fallingEdge,\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  setInputValues(values) {\r\n    this.setValues(values, 'input');\r\n  }\r\n\r\n  setOutputValues(values) {\r\n    this.setValues(values, 'output');\r\n  }\r\n\r\n  setWireValues(values) {\r\n    this.ports.output = this.ports.output.map(port => {\r\n      if (!values[port.name]) return port;\r\n\r\n      return {\r\n        ...port,\r\n        linkValue: values[port.name],\r\n      };\r\n    });\r\n  }\r\n\r\n  hasOutputChanged(values) {\r\n    return !Object.keys(values).every(portName =>\r\n      isValueEqual(\r\n        values[portName],\r\n        this.ports.output.find(output => output.name === portName)\r\n          .value,\r\n      ),\r\n    );\r\n  }\r\n\r\n  getProperties() {\r\n    const customPropertyNames = Object.keys(this).filter(\r\n      key =>\r\n        !['id', 'initialize', 'configurations', 'ports'].includes(\r\n          key,\r\n        ),\r\n    );\r\n\r\n    return JSON.parse(\r\n      JSON.stringify(\r\n        customPropertyNames\r\n          .filter(property => typeof this[property] !== 'function')\r\n          .reduce(\r\n            (obj, property) => ({\r\n              ...obj,\r\n              [property]: this[property],\r\n            }),\r\n            {},\r\n          ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  // Defaults\r\n  onSimulationStart() {}\r\n\r\n  onSimulationPause() {}\r\n\r\n  onSimulationStop() {}\r\n\r\n  step() {\r\n    return {};\r\n  }\r\n\r\n  stepError() {\r\n    return this.ports.output.reduce(\r\n      (obj, port) => ({\r\n        ...obj,\r\n        [port.name]: Array(port.bits).fill('e'),\r\n      }),\r\n      {},\r\n    );\r\n  }\r\n\r\n  stepFloating() {\r\n    return this.ports.output.reduce(\r\n      (obj, port) => ({\r\n        ...obj,\r\n        [port.name]: Array(port.bits).fill('x'),\r\n      }),\r\n      {},\r\n    );\r\n  }\r\n\r\n  emit(value) {\r\n    const event = new MessageEvent('message', {\r\n      data: {\r\n        command: 'emit',\r\n        emitted: { from: this.id, value },\r\n      },\r\n    });\r\n\r\n    // eslint-disable-next-line no-restricted-globals\r\n    self.dispatchEvent(event);\r\n  }\r\n\r\n  // Diagram stubs\r\n  addInputPort() {}\r\n\r\n  addOutputPort() {}\r\n\r\n  removePort() {}\r\n\r\n  // Functionality that requires calling main thread\r\n  createAudio(frequency, waveform) {\r\n    if (!this.audioCount) {\r\n      this.audioCount = 0;\r\n    }\r\n\r\n    const AUDIO_ID = `${this.audioCount}-${this.id}`;\r\n    this.audioCount += 1;\r\n\r\n    postMessage({\r\n      type: 'audio',\r\n      payload: {\r\n        command: 'create',\r\n        id: AUDIO_ID,\r\n        frequency,\r\n        waveform: waveform.toLowerCase(),\r\n      },\r\n    });\r\n\r\n    const play = () =>\r\n      postMessage({\r\n        type: 'audio',\r\n        payload: {\r\n          command: 'play',\r\n          id: AUDIO_ID,\r\n        },\r\n      });\r\n\r\n    const pause = () =>\r\n      postMessage({\r\n        type: 'audio',\r\n        payload: { command: 'pause', id: AUDIO_ID },\r\n      });\r\n\r\n    const setFrequency = freq =>\r\n      postMessage({\r\n        type: 'audio',\r\n        payload: {\r\n          command: 'setFrequency',\r\n          id: AUDIO_ID,\r\n          frequency: freq,\r\n        },\r\n      });\r\n\r\n    const setWaveform = wf =>\r\n      postMessage({\r\n        type: 'audio',\r\n        payload: {\r\n          command: 'setWaveform',\r\n          id: AUDIO_ID,\r\n          waveform: wf,\r\n        },\r\n      });\r\n\r\n    return {\r\n      play,\r\n      pause,\r\n      setFrequency,\r\n      setWaveform,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Converts string representing functions to actual functions in given\r\n * model.\r\n */\r\nconst deserializeMethod = model =>\r\n  Object.fromEntries(\r\n    Object.entries(model.methods).map(([key, stringFn]) => {\r\n      return [\r\n        key,\r\n        // eslint-disable-next-line no-new-func\r\n        new Function(`return function ${stringFn}`)(),\r\n      ];\r\n    }),\r\n  );\r\n\r\nconst deserializeModels = models =>\r\n  models\r\n    .map(model => ({\r\n      ...model,\r\n      methods: deserializeMethod(model),\r\n    }))\r\n    .reduce(\r\n      (obj, model) => ({\r\n        ...obj,\r\n        [model.type]: model.methods,\r\n      }),\r\n      {},\r\n    );\r\n\r\nconst deserializePort = port => ({\r\n  ...port,\r\n  value: new Array(port.bits || 1).fill(port.defaultFloatingValue),\r\n  linkValue: new Array(port.bits || 1).fill(\r\n    port.defaultFloatingValue,\r\n  ),\r\n  getValue() {\r\n    return this.value;\r\n  },\r\n  getWireValue() {\r\n    return this.linkValue;\r\n  },\r\n});\r\n\r\n/**\r\n * Deserialize a given diagram (serialized), generating\r\n * `GenericComponent` instances with its given methods and properties.\r\n */\r\nconst deserialize = serialized => {\r\n  const models = deserializeModels(serialized.models);\r\n\r\n  return {\r\n    components: serialized.components.map(\r\n      component =>\r\n        new GenericComponent(\r\n          {\r\n            ...component.properties,\r\n            id: component.id,\r\n            configurations: component.configurations,\r\n            ports: {\r\n              input: component.ports\r\n                .filter(port => port.input)\r\n                .map(deserializePort),\r\n              output: component.ports\r\n                .filter(port => !port.input)\r\n                .map(deserializePort),\r\n            },\r\n          },\r\n          models[component.type],\r\n        ),\r\n    ),\r\n    meshes: findMeshes(serialized.links),\r\n  };\r\n};\r\n\r\nexport default deserialize;\r\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","/* eslint-disable no-extend-native */\r\nArray.prototype.asArray = function arrayAsArray() {\r\n  return this;\r\n};\r\n\r\nArray.prototype.asNumber = function arrayAsNumber() {\r\n  if (this.some(bit => bit === 'e')) return 'e';\r\n  if (this.some(bit => bit === 'x')) return 'x';\r\n\r\n  if (this.some(bit => bit !== 0 && bit !== 1))\r\n    throw new Error(\r\n      '[logossim] Array cannot be converted to number because it contains invalid values',\r\n    );\r\n\r\n  return this.slice()\r\n    .reverse()\r\n    .reduce((acc, curr, index) => acc + curr * 2 ** index, 0);\r\n};\r\n\r\nArray.prototype.transpose = function transpose() {\r\n  return this[0].map((x1, i) => this.map(x2 => x2[i]));\r\n};\r\n\r\nNumber.prototype.asNumber = function numberAsNumber() {\r\n  return Number(this);\r\n};\r\n\r\nNumber.prototype.asArray = function numberAsArray(dataBits) {\r\n  if (!dataBits)\r\n    throw new Error(\r\n      '[logossim] To transform a number to array, you need to pass as argument the length of the array',\r\n    );\r\n\r\n  const result = [...this.toString(2)].map(Number);\r\n\r\n  return Array(dataBits)\r\n    .fill(0)\r\n    .concat(result)\r\n    .slice(result.length);\r\n};\r\n\r\nString.prototype.asArray = function stringAsArray(dataBits) {\r\n  if (!dataBits)\r\n    throw new Error(\r\n      '[logossim] To transform a number to array, you need to pass as argument the length of the array',\r\n    );\r\n\r\n  return [...this.padStart(dataBits, 0)].map(char => {\r\n    if (char === '0') return 0;\r\n    if (char === '1') return 1;\r\n    return char;\r\n  });\r\n};\r\n\r\nString.prototype.parseBinary = function parseBinary(\r\n  dataBits,\r\n  arrayLength,\r\n  fillWith = 0,\r\n) {\r\n  if (!dataBits)\r\n    throw new Error(\r\n      '[logossim] To parse a binary, you need to pass the value length in bits as first argument.',\r\n    );\r\n\r\n  if (!arrayLength)\r\n    throw new Error(\r\n      '[logossim] To parse a binary, you need to pass the result array length as second argument.',\r\n    );\r\n\r\n  const sanitize = /[^01]/g;\r\n  const chunk = new RegExp(`.{1,${dataBits}}`, 'g');\r\n\r\n  const content = (\r\n    this.replace(sanitize, '').match(chunk) || []\r\n  ).map(value => parseInt(value, 2));\r\n\r\n  return Array(arrayLength)\r\n    .fill(fillWith)\r\n    .map((original, i) => {\r\n      const value = content[i];\r\n      if (!value) return original;\r\n      return value;\r\n    });\r\n};\r\n","/**\r\n * This code runs the simulation workload on a Web Worker thread, to\r\n * avoid blocking the UI (main) thread.\r\n *\r\n * Whenever a component executes `emit`, its changes are pushed to\r\n * `emitQueue`, which will be handled by the `executeNextEmitted`\r\n * function.\r\n *\r\n * Every component that is affected by this emitted event is pushed to\r\n * the `stepQueue`, which will be handled recursively by the\r\n * `executeNextStep` function.\r\n */\r\n\r\n/* ---------------------------------------------------------------- */\r\n\r\n/* eslint-disable no-restricted-globals */\r\n/* eslint-disable no-use-before-define */\r\nimport deserialize from './deserialize';\r\nimport {\r\n  getCleanDiff,\r\n  appendComponentDiff,\r\n  initializeDiffAndValues,\r\n  isInputValid,\r\n  isValueValid,\r\n  getComponent,\r\n  getAffectedMeshes,\r\n  getMeshInputValue,\r\n  getMeshInputComponents,\r\n  getMeshOutputComponents,\r\n  adjustValueToBits,\r\n  isValueFloating,\r\n  isInputError,\r\n  isInputFloating,\r\n} from './utils';\r\n\r\nimport '../common/prototype';\r\n\r\n/**\r\n * Worker states\r\n */\r\nself.circuit = null; // circuit information\r\nself.diff = null; // diff to send back to the app\r\nself.emitQueue = []; // emitted changes that are pending\r\nself.stepQueue = []; // components that are pending propagation\r\nself.workInterval = null; // main execution interval\r\n\r\n/**\r\n * Worker message handling\r\n */\r\nself.addEventListener(\r\n  'message',\r\n  ({ data: { command, diagram, emitted } }) => {\r\n    switch (command) {\r\n      /**\r\n       * START\r\n       */\r\n      case 'start':\r\n        if (diagram !== undefined) {\r\n          self.circuit = deserialize(diagram);\r\n          self.diff = getCleanDiff();\r\n          initializeDiffAndValues();\r\n        }\r\n\r\n        self.circuit.components.forEach(component =>\r\n          component.onSimulationStart(),\r\n        );\r\n\r\n        // Main workload\r\n        executeNextEmitted(true, true);\r\n        self.workInterval = setInterval(executeNextEmitted);\r\n        break;\r\n\r\n      /**\r\n       * PAUSE\r\n       */\r\n      case 'pause':\r\n        self.circuit.components.forEach(component =>\r\n          component.onSimulationPause(),\r\n        );\r\n        clearInterval(self.workInterval);\r\n        break;\r\n\r\n      /**\r\n       * STOP\r\n       */\r\n      case 'stop':\r\n        self.circuit.components.forEach(component =>\r\n          component.onSimulationStop(),\r\n        );\r\n        clearInterval(self.workInterval);\r\n        setTimeout(() => {\r\n          postMessage({ type: 'clear' });\r\n          self.circuit = null;\r\n          self.diff = null;\r\n          self.emitQueue = [];\r\n          self.stepQueue = [];\r\n        });\r\n        break;\r\n\r\n      /**\r\n       * EMIT\r\n       */\r\n      case 'emit':\r\n        if (self.circuit)\r\n          self.emitQueue.push({\r\n            ...emitted,\r\n            from: getComponent(emitted.from),\r\n          });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Handles the next emitted event on the emit queue and propagates it.\r\n */\r\nconst executeNextEmitted = (\r\n  firstOfCycle = true,\r\n  firstOfSimulation = false,\r\n) => {\r\n  if (!self.circuit) return;\r\n\r\n  const emitted = self.emitQueue.shift();\r\n  if (!emitted) return;\r\n\r\n  const emitter = emitted.from;\r\n\r\n  emitted.value = Object.fromEntries(\r\n    Object.entries(emitted.value).map(([portName, portValue]) => {\r\n      if (isValueFloating(portValue)) return [portName, portValue];\r\n\r\n      const { bits } = emitter.getOutputPort(portName);\r\n      let value = portValue;\r\n      if (typeof value === 'number') {\r\n        value = adjustValueToBits(portValue, bits).asArray(bits);\r\n      } else if (value === 'x' || value === 'e') {\r\n        value = Array(bits).fill(value);\r\n      }\r\n\r\n      return [\r\n        portName,\r\n        isValueValid(value, bits) ? value : Array(bits).fill('e'),\r\n      ];\r\n    }),\r\n  );\r\n  emitter.setOutputValues(emitted.value);\r\n\r\n  appendComponentDiff(emitter, emitted.value);\r\n  propagate(emitted);\r\n  executeNextStep(firstOfSimulation);\r\n\r\n  executeNextEmitted(false);\r\n\r\n  if (firstOfCycle) {\r\n    postMessage({ type: 'diff', payload: self.diff });\r\n    self.diff = getCleanDiff();\r\n  }\r\n};\r\n\r\n/**\r\n * Executes a step on the next component affected by the emitted\r\n * change that is being currently handled. Propagates this component's\r\n * change forward.\r\n */\r\nconst executeNextStep = (firstOfSimulation = false) => {\r\n  const component = self.stepQueue.shift();\r\n  if (!component) return;\r\n\r\n  const input = component.ports.input.reduce(\r\n    (obj, port) => ({ ...obj, [port.name]: port.value }),\r\n    {},\r\n  );\r\n  const meta = component.ports.input.reduce(\r\n    (obj, port) => ({ ...obj, [port.name]: port.meta }),\r\n    {},\r\n  );\r\n\r\n  let result = {};\r\n  if (isInputValid(component.ports.input)) {\r\n    result = component.step(\r\n      Object.fromEntries(\r\n        Object.entries(input).map(([key, value]) => [\r\n          key,\r\n          value.asNumber(),\r\n        ]),\r\n      ),\r\n      meta,\r\n    );\r\n  } else if (isInputError(component.ports.input)) {\r\n    result = component.stepError(input, meta);\r\n  } else if (isInputFloating(component.ports.input)) {\r\n    result = component.stepFloating(input, meta);\r\n  } else {\r\n    result = component.stepError(input, meta);\r\n  }\r\n\r\n  if (!result) {\r\n    appendComponentDiff(component);\r\n    executeNextStep();\r\n    return;\r\n  }\r\n\r\n  result = Object.fromEntries(\r\n    Object.entries(result || {}).map(([portName, portValue]) => {\r\n      const { bits } = component.getOutputPort(portName);\r\n      let value = portValue;\r\n      if (typeof value === 'number') {\r\n        value = adjustValueToBits(portValue, bits).asArray(bits);\r\n      } else if (value === 'x' || value === 'e') {\r\n        value = Array(bits).fill(value);\r\n      }\r\n      return [portName, value];\r\n    }),\r\n  );\r\n\r\n  const output = Object.fromEntries(\r\n    Object.entries(result).filter(([portName]) =>\r\n      component.getOutputPort(portName),\r\n    ),\r\n  );\r\n\r\n  if (firstOfSimulation || component.hasOutputChanged(output)) {\r\n    component.setOutputValues(output);\r\n    appendComponentDiff(component, output);\r\n    propagate({ from: component, value: output });\r\n  } else {\r\n    appendComponentDiff(component);\r\n  }\r\n\r\n  executeNextStep();\r\n};\r\n\r\n/**\r\n * Propagates a change on a component to all components connected to\r\n * its output.\r\n */\r\nconst propagate = emitted => {\r\n  const affectedMeshes = getAffectedMeshes(emitted);\r\n  affectedMeshes.forEach(mesh => {\r\n    const meshValue = getMeshInputValue(mesh);\r\n    mesh.links.forEach(link => {\r\n      self.diff.links[link] = meshValue;\r\n    });\r\n\r\n    const componentsOutput = getMeshOutputComponents(mesh);\r\n    componentsOutput.forEach(component => {\r\n      const portsConnectedToMesh = mesh.outputs\r\n        .filter(meshOutput => meshOutput.componentId === component.id)\r\n        .map(meshOutput => meshOutput.name);\r\n\r\n      const portsWithNewValue = portsConnectedToMesh.reduce(\r\n        (obj, portName) => ({ ...obj, [portName]: meshValue }),\r\n        {},\r\n      );\r\n\r\n      component.setInputValues(portsWithNewValue);\r\n\r\n      appendComponentDiff(component, portsWithNewValue);\r\n\r\n      self.stepQueue.push(component);\r\n    });\r\n\r\n    const componentsInput = getMeshInputComponents(mesh);\r\n    componentsInput.forEach(component => {\r\n      const portsConnectedToMesh = mesh.inputs\r\n        .filter(meshInput => meshInput.componentId === component.id)\r\n        .map(meshInput => meshInput.name);\r\n\r\n      const portsWithNewValue = portsConnectedToMesh.reduce(\r\n        (obj, portName) => ({ ...obj, [portName]: meshValue }),\r\n        {},\r\n      );\r\n\r\n      component.setWireValues(portsWithNewValue);\r\n    });\r\n  });\r\n};\r\n"],"sourceRoot":""}